syntax = "proto3";

package org.cwv.client.sdk.model;

message SendTransaction {
	string address = 1;
	int32 nonce = 2;
	string fee = 3;
	string exdata = 4;
	int64 timestamp = 5;
	repeated SendTransactionOutput outputs = 6;
	string privateKey = 7;
	SendTransactionData data = 8;
}

message SendTransactionOutput {
	string address = 1;
	string amount = 2;
	string token = 3;
	string tokenAmount = 4;
	string symbol = 5;
	repeated string cryptoToken = 6;
}

message SendTransactionData {
	SendDataType type = 1;
	SendUnionAccountData unionAccountData = 2;
	SendUnionAccountTransferData unionAccountTransferData = 3;
	SendUnionAccountConfirmData unionAccountConfirmData = 4;
	SendPublicCryptoTokenData cryptoTokenData = 5;
	SendOwnerTokenData ownerTokenData = 6;
	SendUserTokenData userTokenData = 7;
	SendPublicContractData publicContractData = 8;
	SendCallContractData callContractData = 9;
}
	
enum SendDataType {
	NONE = 0;
	PUBLICCRYPTOTOKEN = 1;
	OWNERTOKEN = 2;
	USERTOKEN = 3;
	PUBLICCONTRACT = 4;
	CALLCONTRACT = 5;
	CREATEUNIONACCOUNT = 6;
	PUBLICUNIONACCOUNT = 7;
	UNIONACCOUNTTRANSFER = 8;
	UNIONACCOUNTCONFIRM = 9;
	
}

message SendPublicCryptoTokenData {
	int64 total = 1;
	string symbol = 2;
	repeated string name = 3;
	repeated string code = 4;
	repeated string prop = 5;
}
message SendOwnerTokenData {
	string token = 1;
	string amount = 2;
	SendOwnerTokenOpCode opCode = 3;
	enum SendOwnerTokenOpCode {
		PUBLIC = 0;
		BURN = 1;
		MINT = 2;
	}
}
message SendUserTokenData {
	string token = 1;
	string address = 2;
	string amount = 3;
	SendUserTokenOpCode opCode = 4;
	enum SendUserTokenOpCode {
		FREEZE = 0;
		UNFREEZE = 1;
		LOCK = 2;
		UNLOCK = 3;
	}
}
message SendPublicContractData {
	string data = 1;
	string code = 2;
	string amount = 3;
}
message SendCallContractData {
	string data = 1;
	string contract = 2;
	string amount = 3;
}
message SendUnionAccountData {
	string max = 1;
	string acceptMax = 2;
	int32 acceptLimit = 3;
	repeated string address = 4;
}
message SendUnionAccountTransferData {
	string fromSubAccount = 1;
}
message SendUnionAccountConfirmData {
	string hash = 1;
	string fromSubAccount = 2;
}

message ReqCompileContract{
	string code = 1;
	string contract_name = 4;
	string contract_address = 5;

	string function = 2;
	message Param {
		string type = 1;
		string value = 2;
		repeated string values = 3;
	}

	repeated Param params = 3;
}

message RespCompileContract{
	int32 retCode = 1;
	string retMsg = 2;
	string address = 3;
	string bin = 4;
	string abi = 5;
	string code = 6;
}